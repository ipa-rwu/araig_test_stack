PackageSet {
  CatkinPackage dummy_package {
    Artifact /amcl {
      Node { name /amcl
        ServiceServers {
          ServiceServer { name '/set_map' service 'nav_msgs.SetMap'},
          ServiceServer { name '/amcl/set_parameters' service 'dynamic_reconfigure.Reconfigure'},
          ServiceServer { name '/global_localization' service 'std_srvs.Empty'},
          ServiceServer { name '/request_nomotion_update' service 'std_srvs.Empty'}}
        Publishers {
          Publisher { name '/particlecloud' message 'geometry_msgs.PoseArray'},
          Publisher { name '/amcl/parameter_descriptions' message 'dynamic_reconfigure.ConfigDescription'},
          Publisher { name '/amcl_pose' message 'geometry_msgs.PoseWithCovarianceStamped'},
          Publisher { name '/amcl/parameter_updates' message 'dynamic_reconfigure.Config'},
          Publisher { name '/diagnostics' message 'diagnostic_msgs.DiagnosticArray'}}
        Subscribers {
          Subscriber { name '/initialpose' message 'geometry_msgs.PoseWithCovarianceStamped'},
          Subscriber { name '/scan' message 'sensor_msgs.LaserScan'}}}},
    Artifact /robot_state_publisher {
      Node { name /robot_state_publisher
        Subscribers {
          Subscriber { name '/joint_states' message 'sensor_msgs.JointState'}}}},
    Artifact /map_server {
      Node { name /map_server
        ServiceServers {
          ServiceServer { name '/static_map' service 'nav_msgs.GetMap'}}
        Publishers {
          Publisher { name '/map' message 'nav_msgs.OccupancyGrid'},
          Publisher { name '/map_metadata' message 'nav_msgs.MapMetaData'}}}},
    Artifact /gazebo {
      Node { name /gazebo
        ServiceServers {
          ServiceServer { name '/gazebo/set_joint_properties' service 'gazebo_msgs.SetJointProperties'},
          ServiceServer { name '/gazebo/clear_joint_forces' service 'gazebo_msgs.JointRequest'},
          ServiceServer { name '/gazebo/set_link_properties' service 'gazebo_msgs.SetLinkProperties'},
          ServiceServer { name '/gazebo/get_model_properties' service 'gazebo_msgs.GetModelProperties'},
          ServiceServer { name '/gazebo/set_model_configuration' service 'gazebo_msgs.SetModelConfiguration'},
          ServiceServer { name '/gazebo/apply_body_wrench' service 'gazebo_msgs.ApplyBodyWrench'},
          ServiceServer { name '/gazebo/get_world_properties' service 'gazebo_msgs.GetWorldProperties'},
          ServiceServer { name '/gazebo/delete_model' service 'gazebo_msgs.DeleteModel'},
          ServiceServer { name '/gazebo/delete_light' service 'gazebo_msgs.DeleteLight'},
          ServiceServer { name '/imu_service' service 'std_srvs.Empty'},
          ServiceServer { name '/gazebo/set_parameters' service 'dynamic_reconfigure.Reconfigure'},
          ServiceServer { name '/gazebo/spawn_sdf_model' service 'gazebo_msgs.SpawnModel'},
          ServiceServer { name '/gazebo/reset_world' service 'std_srvs.Empty'},
          ServiceServer { name '/gazebo/unpause_physics' service 'std_srvs.Empty'},
          ServiceServer { name '/gazebo/get_light_properties' service 'gazebo_msgs.GetLightProperties'},
          ServiceServer { name '/gazebo/get_link_state' service 'gazebo_msgs.GetLinkState'},
          ServiceServer { name '/gazebo/clear_body_wrenches' service 'gazebo_msgs.BodyRequest'},
          ServiceServer { name '/gazebo/pause_physics' service 'std_srvs.Empty'},
          ServiceServer { name '/gazebo/set_light_properties' service 'gazebo_msgs.SetLightProperties'},
          ServiceServer { name '/gazebo/set_physics_properties' service 'gazebo_msgs.SetPhysicsProperties'},
          ServiceServer { name '/gazebo/get_link_properties' service 'gazebo_msgs.GetLinkProperties'},
          ServiceServer { name '/gazebo/get_model_state' service 'gazebo_msgs.GetModelState'},
          ServiceServer { name '/gazebo/get_joint_properties' service 'gazebo_msgs.GetJointProperties'},
          ServiceServer { name '/gazebo/apply_joint_effort' service 'gazebo_msgs.ApplyJointEffort'},
          ServiceServer { name '/gazebo/get_physics_properties' service 'gazebo_msgs.GetPhysicsProperties'},
          ServiceServer { name '/gazebo/set_model_state' service 'gazebo_msgs.SetModelState'},
          ServiceServer { name '/gazebo/reset_simulation' service 'std_srvs.Empty'},
          ServiceServer { name '/gazebo/set_link_state' service 'gazebo_msgs.SetLinkState'},
          ServiceServer { name '/gazebo/spawn_urdf_model' service 'gazebo_msgs.SpawnModel'}}
        Publishers {
          Publisher { name '/odom' message 'nav_msgs.Odometry'},
          Publisher { name '/scan' message 'sensor_msgs.LaserScan'},
          Publisher { name '/imu' message 'sensor_msgs.Imu'},
          Publisher { name '/gazebo/parameter_updates' message 'dynamic_reconfigure.Config'},
          Publisher { name '/gazebo/parameter_descriptions' message 'dynamic_reconfigure.ConfigDescription'},
          Publisher { name '/joint_states' message 'sensor_msgs.JointState'},
          Publisher { name '/gazebo/link_states' message 'gazebo_msgs.LinkStates'},
          Publisher { name '/gazebo/model_states' message 'gazebo_msgs.ModelStates'}}
        Subscribers {
          Subscriber { name '/cmd_vel' message 'geometry_msgs.Twist'},
          Subscriber { name '/gazebo/set_model_state' message 'gazebo_msgs.ModelState'},
          Subscriber { name '/gazebo/set_link_state' message 'gazebo_msgs.LinkState'}}}},
    Artifact /move_base {
      Node { name /move_base
        ServiceServers {
          ServiceServer { name '/move_base/global_costmap/obstacle_layer/set_parameters' service 'dynamic_reconfigure.Reconfigure'},
          ServiceServer { name '/move_base/NavfnROS/make_plan' service 'nav_msgs.GetPlan'},
          ServiceServer { name '/move_base/clear_costmaps' service 'std_srvs.Empty'},
          ServiceServer { name '/move_base/global_costmap/inflation_layer/set_parameters' service 'dynamic_reconfigure.Reconfigure'},
          ServiceServer { name '/move_base/local_costmap/obstacle_layer/set_parameters' service 'dynamic_reconfigure.Reconfigure'},
          ServiceServer { name '/move_base/local_costmap/inflation_layer/set_parameters' service 'dynamic_reconfigure.Reconfigure'},
          ServiceServer { name '/move_base/DWAPlannerROS/set_parameters' service 'dynamic_reconfigure.Reconfigure'},
          ServiceServer { name '/move_base/local_costmap/set_parameters' service 'dynamic_reconfigure.Reconfigure'},
          ServiceServer { name '/move_base/make_plan' service 'nav_msgs.GetPlan'},
          ServiceServer { name '/move_base/global_costmap/set_parameters' service 'dynamic_reconfigure.Reconfigure'},
          ServiceServer { name '/move_base/global_costmap/static_layer/set_parameters' service 'dynamic_reconfigure.Reconfigure'},
          ServiceServer { name '/move_base/set_parameters' service 'dynamic_reconfigure.Reconfigure'}}
        Publishers {
          Publisher { name '/move_base/global_costmap/parameter_updates' message 'dynamic_reconfigure.Config'},
          Publisher { name '/move_base/DWAPlannerROS/cost_cloud' message 'sensor_msgs.PointCloud2'},
          Publisher { name '/move_base/local_costmap/footprint' message 'geometry_msgs.PolygonStamped'},
          Publisher { name '/move_base/local_costmap/costmap' message 'nav_msgs.OccupancyGrid'},
          Publisher { name '/move_base/local_costmap/obstacle_layer/parameter_descriptions' message 'dynamic_reconfigure.ConfigDescription'},
          Publisher { name '/move_base/global_costmap/static_layer/parameter_updates' message 'dynamic_reconfigure.Config'},
          Publisher { name '/move_base/goal' message 'move_base_msgs.MoveBaseActionGoal'},
          Publisher { name '/move_base/DWAPlannerROS/parameter_updates' message 'dynamic_reconfigure.Config'},
          Publisher { name '/move_base/local_costmap/inflation_layer/parameter_updates' message 'dynamic_reconfigure.Config'},
          Publisher { name '/move_base/global_costmap/obstacle_layer/parameter_updates' message 'dynamic_reconfigure.Config'},
          Publisher { name '/move_base/DWAPlannerROS/global_plan' message 'nav_msgs.Path'},
          Publisher { name '/move_base/global_costmap/static_layer/parameter_descriptions' message 'dynamic_reconfigure.ConfigDescription'},
          Publisher { name '/move_base/local_costmap/obstacle_layer/parameter_updates' message 'dynamic_reconfigure.Config'},
          Publisher { name '/move_base/local_costmap/costmap_updates' message 'map_msgs.OccupancyGridUpdate'},
          Publisher { name '/move_base/global_costmap/inflation_layer/parameter_descriptions' message 'dynamic_reconfigure.ConfigDescription'},
          Publisher { name '/move_base/NavfnROS/plan' message 'nav_msgs.Path'},
          Publisher { name '/move_base/global_costmap/obstacle_layer/parameter_descriptions' message 'dynamic_reconfigure.ConfigDescription'},
          Publisher { name '/move_base/local_costmap/parameter_descriptions' message 'dynamic_reconfigure.ConfigDescription'},
          Publisher { name '/move_base/global_costmap/costmap_updates' message 'map_msgs.OccupancyGridUpdate'},
          Publisher { name '/move_base/DWAPlannerROS/trajectory_cloud' message 'sensor_msgs.PointCloud2'},
          Publisher { name '/move_base/global_costmap/parameter_descriptions' message 'dynamic_reconfigure.ConfigDescription'},
          Publisher { name '/move_base/current_goal' message 'geometry_msgs.PoseStamped'},
          Publisher { name '/move_base/DWAPlannerROS/local_plan' message 'nav_msgs.Path'},
          Publisher { name '/move_base/global_costmap/costmap' message 'nav_msgs.OccupancyGrid'},
          Publisher { name '/move_base/parameter_updates' message 'dynamic_reconfigure.Config'},
          Publisher { name '/move_base/local_costmap/inflation_layer/parameter_descriptions' message 'dynamic_reconfigure.ConfigDescription'},
          Publisher { name '/move_base/global_costmap/inflation_layer/parameter_updates' message 'dynamic_reconfigure.Config'},
          Publisher { name '/move_base/parameter_descriptions' message 'dynamic_reconfigure.ConfigDescription'},
          Publisher { name '/move_base/DWAPlannerROS/parameter_descriptions' message 'dynamic_reconfigure.ConfigDescription'},
          Publisher { name '/cmd_vel' message 'geometry_msgs.Twist'},
          Publisher { name '/move_base/local_costmap/parameter_updates' message 'dynamic_reconfigure.Config'},
          Publisher { name '/move_base/global_costmap/footprint' message 'geometry_msgs.PolygonStamped'}}
        Subscribers {
          Subscriber { name '/map' message 'nav_msgs.OccupancyGrid'},
          Subscriber { name '/move_base/local_costmap/footprint' message 'geometry_msgs.PolygonStamped'},
          Subscriber { name '/odom' message 'nav_msgs.Odometry'},
          Subscriber { name '/move_base_simple/goal' message 'geometry_msgs.PoseStamped'},
          Subscriber { name '/scan' message 'sensor_msgs.LaserScan'},
          Subscriber { name '/move_base/global_costmap/footprint' message 'geometry_msgs.PolygonStamped'}}
        ActionServers {
          ActionServer { name '/move_base/' action 'move_base_msgs.MoveBase'}}}},
    Artifact parameters_node {
      Node { name parameters_node
        Parameters {
          Parameter { name '/move_base/local_costmap/obstacle_layer/observation_sources' type String },
          Parameter { name '/gazebo/gravity_z' type Double },
          Parameter { name '/move_base/local_costmap/obstacle_layer/footprint_clearing_enabled' type Boolean },
          Parameter { name '/move_base/local_costmap/obstacle_layer/max_obstacle_height' type Double },
          Parameter { name '/move_base/local_costmap/transform_tolerance' type Double },
          Parameter { name '/move_base/DWAPlannerROS/max_vel_x' type Double },
          Parameter { name '/move_base/local_costmap/resolution' type Double },
          Parameter { name '/move_base/DWAPlannerROS/scaling_speed' type Double },
          Parameter { name '/move_base/DWAPlannerROS/vth_samples' type Integer },
          Parameter { name '/gazebo/enable_ros_network' type Boolean },
          Parameter { name '/move_base/DWAPlannerROS/controller_frequency' type Double },
          Parameter { name '/move_base/local_costmap/publish_frequency' type Double },
          Parameter { name '/move_base/global_costmap/plugins' type Struct {
            'type' String,
            'name' String}},
          Parameter { name '/move_base/DWAPlannerROS/latch_xy_goal_tolerance' type Boolean },
          Parameter { name '/move_base/local_costmap/inflation_layer/inflate_unknown' type Boolean },
          Parameter { name '/move_base/clearing_rotation_allowed' type Boolean },
          Parameter { name '/move_base/local_costmap/width' type Integer },
          Parameter { name '/move_base/controller_frequency' type Double },
          Parameter { name '/amcl/use_map_topic' type Boolean },
          Parameter { name '/move_base/shutdown_costmaps' type Boolean },
          Parameter { name '/gazebo/contact_surface_layer' type Double },
          Parameter { name '/gazebo/auto_disable_bodies' type Boolean },
          Parameter { name '/amcl/recovery_alpha_fast' type Double },
          Parameter { name '/move_base/DWAPlannerROS/acc_lim_trans' type Double },
          Parameter { name '/move_base/local_costmap/inflation_layer/cost_scaling_factor' type Double },
          Parameter { name '/amcl/resample_interval' type Integer },
          Parameter { name '/amcl/base_frame_id' type String },
          Parameter { name '/move_base/conservative_reset_dist' type Double },
          Parameter { name '/move_base/local_costmap/plugins' type Struct {
            'type' String,
            'name' String}},
          Parameter { name '/amcl/laser_max_range' type Double },
          Parameter { name '/amcl/odom_frame_id' type String },
          Parameter { name '/move_base/global_costmap/footprint_padding' type Double },
          Parameter { name '/move_base/base_global_planner' type String },
          Parameter { name '/move_base/DWAPlannerROS/stop_time_buffer' type Double },
          Parameter { name '/move_base/make_plan_add_unreachable_goal' type Boolean },
          Parameter { name '/move_base/local_costmap/inflation_layer/inflation_radius' type Double },
          Parameter { name '/move_base/DWAPlannerROS/use_dwa' type Boolean },
          Parameter { name '/amcl/recovery_alpha_slow' type Double },
          Parameter { name '/move_base/global_costmap/update_frequency' type Double },
          Parameter { name '/amcl/odom_model_type' type String },
          Parameter { name '/move_base/local_costmap/inflation_layer/enabled' type Boolean },
          Parameter { name '/amcl/kld_err' type Double },
          Parameter { name '/move_base/global_costmap/height' type Integer },
          Parameter { name '/gazebo/sor_pgs_w' type Double },
          Parameter { name '/move_base/oscillation_timeout' type Double },
          Parameter { name '/move_base/local_costmap/origin_x' type Double },
          Parameter { name '/move_base/local_costmap/origin_y' type Double },
          Parameter { name '/move_base/DWAPlannerROS/publish_traj_pc' type Boolean },
          Parameter { name '/move_base/planner_patience' type Double },
          Parameter { name '/gazebo/max_update_rate' type Double },
          Parameter { name '/move_base/local_costmap/robot_base_frame' type String },
          Parameter { name '/move_base/local_costmap/footprint' type String },
          Parameter { name '/amcl/laser_model_type' type String },
          Parameter { name '/move_base/global_costmap/width' type Integer },
          Parameter { name '/move_base/local_costmap/map_type' type String },
          Parameter { name '/move_base/planner_frequency' type Double },
          Parameter { name '/gazebo/erp' type Double },
          Parameter { name '/move_base/local_costmap/robot_radius' type Double },
          Parameter { name '/robot_description' type String },
          Parameter { name '/amcl/laser_z_rand' type Double },
          Parameter { name '/use_sim_time' type Boolean },
          Parameter { name '/amcl/odom_alpha2' type Double },
          Parameter { name '/gazebo/sor_pgs_rms_error_tol' type Double },
          Parameter { name '/move_base/local_costmap/static_map' type Boolean },
          Parameter { name '/move_base/local_costmap/global_frame' type String },
          Parameter { name '/amcl/gui_publish_rate' type Double },
          Parameter { name '/move_base/aggressive_reset/reset_distance' type Double },
          Parameter { name '/amcl/transform_tolerance' type Double },
          Parameter { name '/move_base/DWAPlannerROS/max_vel_y' type Double },
          Parameter { name '/move_base/local_costmap/rolling_window' type Boolean },
          Parameter { name '/move_base/global_costmap/inflation_layer/inflation_radius' type Double },
          Parameter { name '/move_base/global_costmap/transform_tolerance' type Double },
          Parameter { name '/move_base/global_costmap/inflation_layer/cost_scaling_factor' type Double },
          Parameter { name '/move_base/DWAPlannerROS/oscillation_reset_dist' type Double },
          Parameter { name '/move_base/global_costmap/inflation_layer/inflate_unknown' type Boolean },
          Parameter { name '/amcl/odom_alpha1' type Double },
          Parameter { name '/amcl/odom_alpha3' type Double },
          Parameter { name '/move_base/local_costmap/obstacle_layer/obstacle_range' type Double },
          Parameter { name '/amcl/min_particles' type Integer },
          Parameter { name '/move_base/global_costmap/inflation_layer/enabled' type Boolean },
          Parameter { name '/amcl/laser_max_beams' type Integer },
          Parameter { name '/move_base/global_costmap/static_map' type Boolean },
          Parameter { name '/move_base/local_costmap/obstacle_layer/scan/clearing' type Boolean },
          Parameter { name '/move_base/recovery_behavior_enabled' type Boolean },
          Parameter { name '/amcl/kld_z' type Double },
          Parameter { name '/move_base/global_costmap/origin_x' type Double },
          Parameter { name '/move_base/global_costmap/origin_y' type Double },
          Parameter { name '/move_base/DWAPlannerROS/acc_lim_x' type Double },
          Parameter { name '/amcl/tf_broadcast' type Boolean },
          Parameter { name '/gazebo/time_step' type Double },
          Parameter { name '/move_base/local_costmap/obstacle_layer/scan/sensor_frame' type String },
          Parameter { name '/amcl/initial_pose_x' type Double },
          Parameter { name '/move_base/local_costmap/obstacle_layer/scan/topic' type String },
          Parameter { name '/move_base/global_costmap/footprint' type String },
          Parameter { name '/amcl/laser_z_short' type Double },
          Parameter { name '/move_base/local_costmap/obstacle_layer/raytrace_range' type Double },
          Parameter { name '/move_base/DWAPlannerROS/theta_stopped_vel' type Double },
          Parameter { name '/move_base/global_costmap/robot_radius' type Double },
          Parameter { name '/amcl/do_beamskip' type Boolean },
          Parameter { name '/amcl/update_min_d' type Double },
          Parameter { name '/gazebo/cfm' type Double },
          Parameter { name '/move_base/global_costmap/map_type' type String },
          Parameter { name '/amcl/laser_likelihood_max_dist' type Double },
          Parameter { name '/amcl/global_frame_id' type String },
          Parameter { name '/gazebo/max_contacts' type Integer },
          Parameter { name '/move_base/global_costmap/global_frame' type String },
          Parameter { name '/amcl/update_min_a' type Double },
          Parameter { name '/move_base/DWAPlannerROS/prune_plan' type Boolean },
          Parameter { name '/gazebo/contact_max_correcting_vel' type Double },
          Parameter { name '/move_base/global_costmap/static_layer/enabled' type Boolean },
          Parameter { name '/amcl/odom_alpha4' type Double },
          Parameter { name '/move_base/global_costmap/robot_base_frame' type String },
          Parameter { name '/gazebo/sor_pgs_iters' type Integer },
          Parameter { name '/robot_state_publisher/publish_frequency' type Double },
          Parameter { name '/move_base/DWAPlannerROS/acc_lim_y' type Double },
          Parameter { name '/move_base/global_costmap/obstacle_layer/scan/marking' type Boolean },
          Parameter { name '/move_base/local_costmap/obstacle_layer/scan/marking' type Boolean },
          Parameter { name '/move_base/global_costmap/obstacle_layer/obstacle_range' type Double },
          Parameter { name '/move_base/global_costmap/obstacle_layer/scan/topic' type String },
          Parameter { name '/move_base/make_plan_clear_costmap' type Boolean },
          Parameter { name '/move_base/global_costmap/obstacle_layer/scan/clearing' type Boolean },
          Parameter { name '/amcl/laser_min_range' type Double },
          Parameter { name '/move_base/conservative_reset/reset_distance' type Double },
          Parameter { name '/move_base/global_costmap/obstacle_layer/scan/sensor_frame' type String },
          Parameter { name '/move_base/global_costmap/obstacle_layer/scan/data_type' type String },
          Parameter { name '/move_base/global_costmap/obstacle_layer/combination_method' type Integer },
          Parameter { name '/move_base/global_costmap/obstacle_layer/enabled' type Boolean },
          Parameter { name '/move_base/global_costmap/obstacle_layer/raytrace_range' type Double },
          Parameter { name '/gazebo/sor_pgs_precon_iters' type Integer },
          Parameter { name '/amcl/initial_pose_a' type Double },
          Parameter { name '/move_base/global_costmap/obstacle_layer/footprint_clearing_enabled' type Boolean },
          Parameter { name '/amcl/beam_skip_distance' type Double },
          Parameter { name '/move_base/DWAPlannerROS/vy_samples' type Integer },
          Parameter { name '/move_base/DWAPlannerROS/occdist_scale' type Double },
          Parameter { name '/move_base/global_costmap/obstacle_layer/observation_sources' type String },
          Parameter { name '/move_base/base_local_planner' type String },
          Parameter { name '/move_base/global_costmap/obstacle_layer/max_obstacle_height' type Double },
          Parameter { name '/amcl/laser_lambda_short' type Double },
          Parameter { name '/move_base/global_costmap/resolution' type Double },
          Parameter { name '/move_base/local_costmap/obstacle_layer/scan/data_type' type String },
          Parameter { name '/amcl/laser_sigma_hit' type Double },
          Parameter { name '/move_base/global_costmap/publish_frequency' type Double },
          Parameter { name '/move_base/local_costmap/height' type Integer },
          Parameter { name '/move_base/DWAPlannerROS/min_vel_trans' type Double },
          Parameter { name '/move_base/local_costmap/update_frequency' type Double },
          Parameter { name '/amcl/odom_alpha5' type Double },
          Parameter { name '/move_base/DWAPlannerROS/max_vel_theta' type Double },
          Parameter { name '/move_base/DWAPlannerROS/max_scaling_factor' type Double },
          Parameter { name '/amcl/save_pose_rate' type Double },
          Parameter { name '/move_base/DWAPlannerROS/acc_lim_theta' type Double },
          Parameter { name '/amcl/first_map_only' type Boolean },
          Parameter { name '/amcl/initial_pose_y' type Double },
          Parameter { name '/move_base/controller_patience' type Double },
          Parameter { name '/move_base/local_costmap/footprint_padding' type Double },
          Parameter { name '/move_base/restore_defaults' type Boolean },
          Parameter { name '/move_base/DWAPlannerROS/path_distance_bias' type Double },
          Parameter { name '/gazebo/gravity_x' type Double },
          Parameter { name '/move_base/DWAPlannerROS/angular_sim_granularity' type Double },
          Parameter { name '/move_base/oscillation_distance' type Double },
          Parameter { name '/move_base/local_costmap/obstacle_layer/enabled' type Boolean },
          Parameter { name '/move_base/DWAPlannerROS/oscillation_reset_angle' type Double },
          Parameter { name '/move_base/DWAPlannerROS/goal_distance_bias' type Double },
          Parameter { name '/move_base/DWAPlannerROS/publish_cost_grid_pc' type Boolean },
          Parameter { name '/move_base/DWAPlannerROS/sim_time' type Double },
          Parameter { name '/move_base/DWAPlannerROS/max_vel_trans' type Double },
          Parameter { name '/amcl/initial_cov_xx' type Double },
          Parameter { name '/amcl/restore_defaults' type Boolean },
          Parameter { name '/move_base/DWAPlannerROS/min_vel_theta' type Double },
          Parameter { name '/move_base/DWAPlannerROS/sim_granularity' type Double },
          Parameter { name '/amcl/laser_z_max' type Double },
          Parameter { name '/move_base/DWAPlannerROS/restore_defaults' type Boolean },
          Parameter { name '/amcl/beam_skip_threshold' type Double },
          Parameter { name '/move_base/DWAPlannerROS/xy_goal_tolerance' type Double },
          Parameter { name '/move_base/DWAPlannerROS/trans_stopped_vel' type Double },
          Parameter { name '/amcl/initial_cov_aa' type Double },
          Parameter { name '/amcl/max_particles' type Integer },
          Parameter { name '/move_base/DWAPlannerROS/twirling_scale' type Double },
          Parameter { name '/move_base/DWAPlannerROS/min_vel_x' type Double },
          Parameter { name '/move_base/max_planning_retries' type Integer },
          Parameter { name '/move_base/DWAPlannerROS/min_vel_y' type Double },
          Parameter { name '/move_base/local_costmap/obstacle_layer/combination_method' type Integer },
          Parameter { name '/gazebo/gravity_y' type Double },
          Parameter { name '/move_base/DWAPlannerROS/vx_samples' type Integer },
          Parameter { name '/move_base/DWAPlannerROS/forward_point_distance' type Double },
          Parameter { name '/amcl/laser_z_hit' type Double },
          Parameter { name '/move_base/DWAPlannerROS/yaw_goal_tolerance' type Double },
          Parameter { name '/amcl/initial_cov_yy' type Double }}}}
}}